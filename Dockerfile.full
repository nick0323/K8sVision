# 完整应用 Dockerfile - 包含前端和后端
# 用于构建包含前端静态文件的完整后端服务

# 前端依赖阶段
FROM node:20-alpine as frontend-deps
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# 前端构建阶段
FROM node:20-alpine as frontend-builder
WORKDIR /app/frontend
COPY --from=frontend-deps /app/frontend/node_modules ./node_modules
COPY frontend/ .
RUN npm run build && \
    npm prune --production && \
    rm -rf /app/frontend/node_modules/.cache

# 后端依赖阶段
FROM golang:1.24-alpine as backend-deps
WORKDIR /app
RUN apk add --no-cache git ca-certificates tzdata
COPY go.mod go.sum ./
ENV GOPROXY=https://goproxy.cn,direct \
    CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64
RUN go mod download && go mod verify

# 后端构建阶段
FROM golang:1.24-alpine as backend-builder
WORKDIR /app
RUN apk add --no-cache git ca-certificates tzdata
COPY --from=backend-deps /app/go.mod /app/go.sum ./
COPY --from=backend-deps /go/pkg/mod /go/pkg/mod
COPY . .
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GOPROXY=https://goproxy.cn,direct
RUN go build -ldflags='-w -s -extldflags "-static"' -trimpath -o k8svision ./main.go

# 最终运行阶段
FROM alpine:3.19 as runtime

# 安装必要的运行时依赖
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 创建非root用户和组
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup -h /app -s /bin/sh

# 设置工作目录
WORKDIR /app

# 复制构建产物
COPY --from=backend-builder /app/k8svision .
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist
COPY --from=backend-builder /app/config.yaml .

# 创建必要的目录并设置权限
RUN mkdir -p /app/logs /app/tmp && \
    chown -R appuser:appgroup /app && \
    chmod +x /app/k8svision

# 切换到非root用户
USER appuser

# 设置环境变量
ENV TZ=UTC \
    GIN_MODE=release

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 暴露端口
EXPOSE 8080

# 使用dumb-init作为PID 1，确保信号正确处理
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/k8svision"]
